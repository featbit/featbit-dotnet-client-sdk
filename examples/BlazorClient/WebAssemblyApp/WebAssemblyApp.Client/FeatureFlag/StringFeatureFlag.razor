@using FeatBit.ClientSdk.Events
@inject IFbClient _fbClient;

@if (IsVisible)
{
    @ChildContent
}


@code {

    [Parameter]
    public string FlagKey { get; set; }
    [Parameter]
    public string EnableValue { get; set; }
    [Parameter]
    public string DefaultValue { get; set; }

    public bool IsVisible { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _fbClient.FeatureFlagsUpdated += FeatureFlagsUpdatedCallback;
        SetVisibility();
    }

    private void FeatureFlagsUpdatedCallback(object? sender, FeatureFlagsUpdatedEventArgs e)
    {
        if (e.UpdatedFeatureFlags.Any(p=>p.Id == FlagKey))
        {
            var newVariation = _fbClient.StringVariation(FlagKey, DefaultValue);
            if(newVariation == EnableValue)
            {
                InvokeAsync(() =>
                {
                    IsVisible = true;
                    StateHasChanged();
                }).Wait();
            }
            else
            {
                InvokeAsync(() =>
                {
                    IsVisible = false;
                    StateHasChanged();
                }).Wait();
            }
        }
    }

    private void SetVisibility()
    {
        var newVariation = _fbClient.StringVariation(FlagKey, DefaultValue);
        if(newVariation == EnableValue)
        {
            InvokeAsync(() =>
            {
                IsVisible = true;
                StateHasChanged();
            }).Wait();
        }
        else
        {
            InvokeAsync(() =>
            {
                IsVisible = false;
                StateHasChanged();
            }).Wait();
        }
    }

    public void Dispose()
    {
        _fbClient.FeatureFlagsUpdated -= FeatureFlagsUpdatedCallback;
    }
       
}
